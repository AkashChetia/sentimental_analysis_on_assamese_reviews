# -*- coding: utf-8 -*-
"""
Created on Tue Jul 13 05:48:22 2021

@author: Reckon Mazumdar
"""
##Importing required libraries
import streamlit as st
import pickle
import nltk

#Function to clean the text
def transform_text(text):
    text=nltk.word_tokenize(text)
    stop=['‡¶Ö‡¶§‡¶è‡¶¨', '‡¶Ö‡¶•‡¶ö', '‡¶Ö‡¶•‡¶¨‡¶æ', '‡¶Ö‡¶ß‡¶É', '‡¶Ö‡¶®‡ßç‡¶§‡¶§‡¶É', '‡¶Ö‡ß∞‡ßç‡¶•‡¶æ‡ßé', '‡¶Ö‡ß∞‡ßç‡¶•‡ßá', '‡¶Ü‡¶ì', '‡¶Ü‡¶É', '‡¶Ü‡¶ö‡ßç‡¶õ‡¶æ', '‡¶Ü‡¶™‡¶æ‡¶§‡¶§‡¶É', '‡¶Ü‡ßü‡ßà', '‡¶Ü‡ß∞‡ßÅ',
      '‡¶Ü‡¶∏‡ßç', '‡¶Ü‡¶π‡¶æ', '‡¶Ü‡¶π‡¶æ‡¶π‡¶æ', '‡¶á‡¶§‡¶∏‡ßç‡¶§‡¶§‡¶É', '‡¶á‡¶§‡¶ø', '‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø', '‡¶á‡¶∏‡ßç', '‡¶á‡¶π', '‡¶â‡¶É', '‡¶â‡ß±‡¶æ', '‡¶â‡¶∏‡ßç', '‡¶è‡¶§‡ßá‡¶ï‡ßá', '‡¶è‡¶•‡ßã‡¶®',
      '‡¶ê', '‡¶ì‡¶Å', '‡¶ì‡ß∞‡¶´‡ßá', '‡¶î‡¶ö‡ßç', '‡¶ï‡¶ø', '‡¶ï‡¶ø‡¶Æ‡ßç‡¶¨‡¶æ', '‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ', '‡¶ï‡¶ø‡ßü‡¶®‡ßã', '‡¶ï‡ßá‡¶≤‡ßá‡¶á', '‡¶ö‡ßã‡¶®', '‡¶õ‡¶æ‡ß∞‡¶ø', '‡¶õ‡¶ø‡¶ï‡ßå', '‡¶õ‡ßá‡¶á',
      '‡¶†‡¶æ‡¶π‡ßç', '‡¶¢‡ßá‡¶Å‡¶ü‡ßç', '‡¶§‡¶§', '‡¶§‡¶§‡¶ï', '‡¶§‡¶§‡ßá‡¶ï', '‡¶§‡ßá‡¶§‡ßá‡¶ï', '‡¶§‡¶§‡ßá‡¶ï', '‡¶§‡¶§‡ßç‡ß∞‡¶æ‡¶ö', '‡¶§‡¶•‡¶æ', '‡¶§‡¶•‡ßà‡¶¨‡¶ö', '‡¶§‡¶æ‡¶§‡ßá', '‡¶§‡ßá‡¶ì',
      '‡¶§‡ßã', '‡¶§‡ßå‡ß±‡¶æ', '‡¶¶‡ßá‡¶á', '‡¶¶‡ßá‡¶π‡¶ø', '‡¶¶‡ßç‡¶¨‡¶æ‡ß∞‡¶æ', '‡¶ß‡ß∞‡¶ø', '‡¶ß‡¶ø‡¶ï‡ßç', '‡¶®‡¶§‡ßÅ‡¶¨‡¶æ', '‡¶®‡¶ø', '‡¶®‡ßã', '‡¶®‡ßå', '‡¶™‡ß∞‡¶æ', '‡¶™‡ß∞‡ßç‡¶Ø‡¶®‡ßç‡¶§',
      '‡¶¨‡ß∞‡¶û‡ßç‡¶ö', '‡¶¨‡¶π‡¶ø‡¶É', '‡¶¨‡¶æ‡¶¨‡ßá', '‡¶¨‡¶æ‡ß∞‡ßÅ', '‡¶¨‡¶æ‡¶π‡ßç', '‡¶¨‡¶æ‡¶π‡¶ø‡ß∞‡ßá', '‡¶¨‡¶ø‡¶®‡ßá', '‡¶¨‡ßá', '‡¶Æ‡¶§‡ßá', '‡¶Ø‡¶•‡¶æ', '‡¶Ø‡¶¶‡¶ø', '‡¶Ø‡¶¶‡ßç‡¶Ø‡¶™‡¶ø', '‡¶Ø‡ßá',
      '‡¶Ø‡ßá‡¶®‡¶ø‡¶¨‡¶æ', '‡¶Ø‡ßá‡¶®‡ßá', '‡¶Ø‡ßã‡¶ó‡ßá', '‡¶≤‡ßà', '‡¶∏‡¶§‡ßç‡¶§‡ßç‡¶¨‡ßá', '‡¶∏‡¶Æ‡¶®‡ßç‡¶ß‡¶ø', '‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡ß∞‡¶§‡¶ø', '‡¶∏‡¶π', '‡¶∏‡ßÅ', '‡¶∏‡ßá‡¶á‡¶¶‡ßá‡¶ñ‡¶ø', '‡¶∏‡ßà‡¶§‡ßá', '‡¶∏‡ßç‡¶¨‡¶§‡¶É', '‡¶π‡¶û‡ßá', '‡¶π‡¶§‡ßÅ‡ß±‡¶æ', '‡¶π‡¶®‡ßç‡¶§‡ßá',
      '‡¶π‡¶¨‡¶≤‡¶æ', '‡¶π‡ßü', '‡¶π‡¶æ', '‡¶π‡ßÅ‡¶Å', '‡¶π‡ßÅ‡¶á', '‡¶π‡ßá', '‡¶π‡ßá‡¶á', '‡¶π‡ßá‡¶É', '‡¶π‡ßá‡¶§‡ßÅ‡¶ï‡ßá', '‡¶π‡ßá‡¶®‡ßá', '‡¶π‡ßá‡¶®‡ßã', '‡¶π‡ßá‡ß∞', '‡¶π‡ßá‡ß∞‡¶ø', '‡¶π‡ßà', '‡¶π‡ßã‡¶Å', '‡¶á‡¶É', '‡¶á‡¶ö‡ßç',
      '‡¶ö‡ßÅ‡¶π‡ßç', '‡¶ö‡ßÅ‡¶É', '‡¶Ü‡¶Å']
    punc="!\"#$%&'()*+,-./:;<=>?@[\]^_`{|}~‡•§"
    puncword=[]
    for i in punc:
         puncword.append(i)
    y=[]
    for i in text:
        if i not in stop and i not in punc:
            y.append(i)
    text=y[:]
    y.clear()
    for i in text:
        i=''.join(j for j in i if not j in puncword)
        y.append(i)
    return " ".join(y)

#Loading the model and vectorizer
tfidf = pickle.load(open('vectorizer.pkl','rb'))
model = pickle.load(open('model.pkl','rb'))

#App title
st.title("Assamese song review sentiment analyzer")

#Text box
ip_sentence=st.text_area("Enter the assamese sentence")

if st.button('Predict'):
    #Taking input and Cleaning the text
    transformed_sentence=transform_text(ip_sentence)
    #Vectorizing
    vec=tfidf.transform([transformed_sentence])
    #predicting result and displaying it
    result= model.predict(vec)[0]
    if result == 1:
        st.header("Positiveüòá")
    else:
        st.header("Negative‚òπÔ∏è")
